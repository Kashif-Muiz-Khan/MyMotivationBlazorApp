@using Microsoft.EntityFrameworkCore
@using MyMotivationBlazorApp.Context
@using MyMotivationBlazorApp.Model
@rendermode InteractiveServer
@inject DatabaseContext DbContext
@inject NavigationManager NavigationManager



@* This is the form that lets you add new quotes and select the philosophers, still needs implementation where it will let you add a new philosopher *@
<div>
    <div class="row g-0">
        <div class="col-md-12">
            <button class="btn btn-primary float-end" @onclick="ShowAddQuote">
                Add Quote
            </button>
        </div>
    </div>

    @if (showForm)
{
    <div class="card">
        <div class="card-body bg-light">
            <h4 class="card-title">
                @(model.Id == 0 ? "Add Quote" : "Edit Quote")
            </h4>
            <EditForm OnValidSubmit="Submit" EditContext="editContext">
                <DataAnnotationsValidator />
                <div class="row g-3">
                    <div class="col-md-3">
                        <label for="name" class="form-label">Text</label>
                        <InputText class="form-control" placeholder="Text" @bind-Value="model.Text" />
                        <ValidationMessage For="@(() => model.Text)" />
                    </div>
                    <div class="col-md-3">
                        <label for="type" class="form-label">Problem</label>
                        <InputText class="form-control" placeholder="Problem" @bind-Value="model.Problem" />
                        <ValidationMessage For="@(() => model.Problem)" />
                    </div>
                    <div class="col-md-3">
                        <label for="validationCustom04" class="form-label">Philosopher</label>
                        <select class="form-select" id="validationCustom04" @bind="selectedPhilosopherId" required>
                            <option selected disabled value="">Choose...</option>
                            @foreach (var philosopher in philosophers)
                            {
                                <option value="@philosopher.Id">@philosopher.Name</option>
                            }
                        </select>
                        <div class="invalid-feedback">
                            Please select a valid philosopher.
                        </div>
                    </div>

                    <div class="col-md-12">
                        <button type="submit" class="btn btn-primary float-end">
                            @(model.Id == 0 ? "Add Quote" : "Edit Quote")
                        </button>
                    </div>

                </div>
            </EditForm>
        </div>
    </div>
}
</div>






@* This Table shows all the Philosophers, what they said and the id of their sayings, It allows you to edit, delete and see more info

The Info page for this still needs working *@

<table class="table">
    <thead>
        <tr>
            <th scope="col">#</th>
            <th scope="col">Text</th>
            <th scope="col">Philosopher</th>
            <th></th>
            <th></th>
            <th></th>
        </tr>
    </thead>
    <tbody>
        @foreach (var quote in quotes)
        {
            <tr>
                <td>@quote.Id</td>
                <td>@quote.Text</td>
                <td>@GetPhilosopherName(quote.PhilosopherId)</td>

                <td>
                    <button class="btn btn-success" @onclick="() => Edit(quote)">Edit</button>
                </td>
                <td>
                    <button class="btn btn-danger" @onclick="() => Delete(quote)">Delete</button>
                </td>
                <td>
                    <button class="btn btn-primary" @onclick="() => Info(quote)">Info</button>
                </td>
            </tr>
        }
    </tbody>
</table>




@code {
    private List<Quote>? quotes;
    private EditContext editContext;
    private Quote model;
    private bool showForm;


   
    // passes the quote Id to info page - Still needs implementation
    // Passes the quote and philosopher name to the info page
    private void Info(Quote quote)
    {
        var philosopherName = GetPhilosopherName(quote.PhilosopherId);
        NavigationManager.NavigateTo($"/philosopher-info/{philosopherName}");
    }


    // Opens up the Add Quote form to add new quote
    private void ShowAddQuote()
    {
        model = new Quote();
        editContext = new EditContext(model);
        showForm = true;
    }

    // Opens up the Add/Edit quote form and displays the quote selected to be edited
    private void Edit(Quote quote)
    {
        model = quote;
        editContext = new EditContext(model);
        showForm = true;
    }

    // Adds quote to DB if its new otherwise updates the existing quote
    private async Task Submit()
    {
        if (model.Id == 0)
            DbContext.Quotes.Add(model);
        else
            DbContext.Quotes.Update(model);

        await DbContext.SaveChangesAsync();
        await Refresh();

    }

    // Refreshes the database / quotes after any changes or edits
    private async Task Refresh()
    {
        model = new Quote();
        editContext = new EditContext(model);
        quotes = await DbContext.Quotes.ToListAsync();
    }

    // Deletes quotes from the database and list
    private async Task Delete(Quote quotes)
    {
        DbContext.Quotes.Remove(quotes);
        await DbContext.SaveChangesAsync();
        await Refresh();
    }

    // Method used to get Philosopher name from Philosphers Table using philosopher id from Quote table
    private string GetPhilosopherName(int philosopherId)
    {
        var philosopher = DbContext.Philosophers.Find(philosopherId);
        return philosopher != null ? philosopher.Name : "Unknown";
    }


    // private int variable declared that will store objects of Philospher Type
    private int selectedPhilosopherId;
    private List<Philosopher> philosophers = new List<Philosopher>();


    // The following code creates variables that will store selected philosopher ID and lists of philosophers. 
    // It will then load quotes and philosphers from database
    
    protected override async Task OnInitializedAsync()
    {
        await LoadData();
    }

    private async Task LoadData()
    {
        await LoadQuotes();
        await LoadPhilosophers();
    }

    private async Task LoadQuotes()
    {
        quotes = await DbContext.Quotes.ToListAsync();
    }

    private async Task LoadPhilosophers()
    {
        philosophers = await DbContext.Philosophers.ToListAsync();
    }




}
